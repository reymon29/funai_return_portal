<div class="flex-container">
  <%= simple_form_for @return, html: { autocomplete: 'off' } do |f| %>
  <%= f.error_notification %>
    <div class="flex-item">
      <h1>Create return request</h1>
      <div class="notes">
        <abbr title="required">*</abbr> note are required fields.
      </div>
      <div class="flex-item col-md-4 col-lg-4">
         <h4 class="fs-title">Funai model</h4>
        <%= f.input :item_number, required: true, autofocus: true, hint: 'Aaron\'s item number reference.', input_html: {  min: "1000000000" }, placeholder: "1000000000" %>


        <div class="autocomplete form-group">
          <label class="form-control-label string required" for="return_item_number">Location Store Number <abbr title="required">*</abbr></label>
          <input id="return_store_number" type="text" name="return[store_number]" placeholder="F469 or C0S01">

          <small class="form-text text-muted">Aaron's location for pickup.</small>
        </div>


        <%= f.input :location_type, collection: [ ["Store", "store_front"],
              ["Fulfillment Center", "fulfillment_center"],
              ["Service Center", "service_center"]], prompt: "Select location type", hint: 'Pick up location type.' %>
        <%= f.association :product, required: true, label: "Model number", prompt: "Choose a product", label_method: :name, value_method: :id %>
        <%= f.input :serial_number, required: true, autofocus: true, hint: 'Aaron\'s Funai serial #.', placeholder: "ME1A1234567890" %>
        <%= f.input :invoice_date, as: :string, required: false, input_html: {class: "datepicker"},  hint: 'Aaron\'s PO invoice date .'  %>
        <%= f.input :lease_date, as: :string, required: false, input_html: {class: "datepicker"},  hint: 'Aaron\'s inital lease date.' %>
        <div class="check-box">
          <input type="checkbox" id="no_lease" onclick="myFunction()" class="form-group"><small class="form-text text-muted">No Lease - if item has not been leased to a customer.</small></input>
        </div>
      </div>
    </div>
    <div class="flex-item col-md-4 col-lg-4">
      <h4 class="fs-title">Return Reason</h4>
      <%= f.input :part_number, required: true, collection: ['Panel', 'Digital Main', 'Power Board', 'Other item'], prompt: "Choose a item"  %>
      <%= f.input :return_reason, required: true, collection: ['Unrepairable by servicer', 'Part Not Available', 'Concealed Damage', 'No Servicer Available'], prompt: "Choose a reason" %>
      <%= f.input :comment, required: true, autofocus: true, input_html: { placeholder: "Return reason comment"} %>

      <%= f.input :images,  as: :file, input_html: { multiple: true, name: "images[]" }, hint: "You may upload multiple photos. Accepted formats jpg jpeg gif png" %>
      <button id="btn-example-file-reset" type="button" class="btn btn-default">Remove images</button>
      <div id="preview"></div>

    </div>
    <div class="flex-item col-md-4 col-lg-4">
      <h4 class="fs-title">Pick up address</h4>
      <%= f.input :attention_name, required: true, label: "Contact Name", placeholder: "Sam Thompson" %>
      <%= f.input :address, required: true, placeholder: "12120 15 St STE 104" %>
      <%= f.input :address2 %>
      <%= f.input :city, required: true, placeholder: "Grandview" %>
      <%= f.input :state, required: true, collection: [['Alabama', 'AL'],
              ['Alaska', 'AK'],
              ['Arizona', 'AZ'],
              ['Arkansas', 'AR'],
              ['California', 'CA'],
              ['Colorado', 'CO'],
              ['Connecticut', 'CT'],
              ['Delaware', 'DE'],
              ['District of Columbia', 'DC'],
              ['Florida', 'FL'],
              ['Georgia', 'GA'],
              ['Hawaii', 'HI'],
              ['Idaho', 'ID'],
              ['Illinois', 'IL'],
              ['Indiana', 'IN'],
              ['Iowa', 'IA'],
              ['Kansas', 'KS'],
              ['Kentucky', 'KY'],
              ['Louisiana', 'LA'],
              ['Maine', 'ME'],
              ['Maryland', 'MD'],
              ['Massachusetts', 'MA'],
              ['Michigan', 'MI'],
              ['Minnesota', 'MN'],
              ['Mississippi', 'MS'],
              ['Missouri', 'MO'],
              ['Montana', 'MT'],
              ['Nebraska', 'NE'],
              ['Nevada', 'NV'],
              ['New Hampshire', 'NH'],
              ['New Jersey', 'NJ'],
              ['New Mexico', 'NM'],
              ['New York', 'NY'],
              ['North Carolina', 'NC'],
              ['North Dakota', 'ND'],
              ['Ohio', 'OH'],
              ['Oklahoma', 'OK'],
              ['Oregon', 'OR'],
              ['Pennsylvania', 'PA'],
              ['Puerto Rico', 'PR'],
              ['Rhode Island', 'RI'],
              ['South Carolina', 'SC'],
              ['South Dakota', 'SD'],
              ['Tennessee', 'TN'],
              ['Texas', 'TX'],
              ['Utah', 'UT'],
              ['Vermont', 'VT'],
              ['Virginia', 'VA'],
              ['Washington', 'WA'],
              ['West Virginia', 'WV'],
              ['Wisconsin', 'WI'],
              ['Wyoming', 'WY'],
              ["           "],
              ['Alberta', 'AB' ],
              ['Manitoba', 'BC' ],
              ['New Brunswick', 'NB' ],
              ['Newfoundland and Labrador', 'NL' ],
              ['Nova Scotia', 'NS' ],
              ['Northwest Territories', 'NT' ],
              ['Nunavut', 'NU' ],
              ['Ontario', 'ON' ],
              ['Quebec', 'OC' ],
              ['Saskatchewan', 'SK' ],
              ['Yukon', 'IT' ]],
              prompt: "Select state" %>
      <%= f.input :zip, required: true, placeholder: "64030" %>
      <%= f.country_select :country, required: true, only: ["CA"], priority_countries: ["US"] %>
      <%= f.input :contact_number, required: true, placeholder: "8167650866" %>
      <%= f.input :special_comments, placeholder: "Instructions we may need." %>
      <div class="btn-section">
        <%= f.button :submit, "Submit", class: "btn btn-primary" %>
        <%= link_to 'Cancel', dashboard_path, class: "btn btn-warning" %>
      </div>
    </div>
  <% end %>
</div>
<div class="container-svg">
  <div class="row">
    <h1 class="text-center">Loading... Please wait..</h1>
    <h5 class="text-center">May take a few minutes.</h5>
    <h6 class="text-center">Depending on if you are uploading high resolution images.</h6>
    <div id="box">
      <div id="container">
        <div class="pip pip-1"></div>
        <div class="pip pip-2"></div>
        <div class="pip pip-3"></div>
      </div>
    </div>
  </div>
</div>

<script>

  var btnSave = document.querySelector(".btn-primary");
  var defaultSVG = document.querySelector(".container-svg");
  var defaultFlex = document.querySelector(".flex-container");
  var defaultAlert = document.querySelector(".alert");
  btnSave.addEventListener('click', function() {
    defaultFlex.style.display = "none";
    defaultSVG.style.display = "inline";
  });

</script>

<script>
  function myFunction() {
  var btnLease = document.getElementById("no_lease");
  var dateLease = document.getElementById("return_lease_date");
  if (btnLease.checked == true){
    dateLease.disabled = true;
    dateLease.value = "";
  } else {
    dateLease.disabled = false;
  }
}
</script>


<script>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              var storeType = document.getElementById("return_location_type");
              var storePick = document.getElementById("return_attention_name");
              var storeAddress = document.getElementById("return_address");
              var storeCity = document.getElementById("return_city");
              var storeState = document.getElementById("return_state");
              var storeZip = document.getElementById("return_zip");
              var storeCountry = document.getElementById("return_country");
              var storeContact = document.getElementById("return_contact_number");
              if(inp.value != "<%= current_user.store_number %>"){
              } else {
                storePick.value = "<%= current_user.first_name %> <%= current_user.last_name %>";
                storeType.value = "<%= current_user.location_type %>";
                storeAddress.value = "<%= current_user.address %>";
                storeCity.value = "<%= current_user.city %>";
                storeState.value = "<%= current_user.state %>";
                storeZip.value = "<%= current_user.zip %>";
                storeCountry.value = "<%= current_user.country %>";
                storeContact.value = "<%= current_user.phone_number %>";
              }

              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });

          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the country names in the world:*/
var countries = ["Afghanistan", "<%= current_user.store_number %>"];

/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("return_store_number"), countries);
</script>

